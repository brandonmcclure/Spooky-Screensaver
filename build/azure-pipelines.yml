trigger:
 batch: true
 branches:
    include:
    - master
 paths:
    include:
    - SpiderScreensaver.sln
    - SpiderScreensaver/*
    - build/*
pool:
  name: Hosted VS2017
  demands:
  - msbuild
  - visualstudio
  - java
  - vstest
variables:
  configuration: debug
  system.debug: false
  BuildPlatform: any cpu
  BuildConfiguration: release
stages:
- stage: Build
  jobs:     
  - job: VSBuild
    steps:
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      condition: eq(variables['RunCodeAnalysis'], 'true')
      inputs:
        SonarCloud: 'sq cloud'
        organization: 'brandonmcclure-github'
        projectKey: 'brandonmcclure_Spooky-Screensaver'
        projectName: 'Spooky-Screensaver'
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '**\*.sln'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln'
      inputs:
        solution: '**\*.sln'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
    - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
      displayName: 'Run Code Analysis'
      condition: eq(variables['RunCodeAnalysis'], true)
    - task: VSTest@2
      displayName: 'VsTest - testAssemblies'
      inputs:
        testAssemblyVer2: |
         **\$(BuildConfiguration)\*test*.dll
         !**\obj\**
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        diagnosticsEnabled: True
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**\bin\$(BuildConfiguration)\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: PowerShell@2
      displayName: 'copy exe into .scr file'
      inputs:
        targetType: 'inline'
        script: |
           Write-Host " We are: at $(Get-Location)"
           Write-Host "env:SYSTEM_ARTIFACTSDIRECTORY = $env:SYSTEM_ARTIFACTSDIRECTORY"
           
           if ($(system.debug)){
            Write-Host "env:AGENT_RELEASEDIRECTORY = $env:AGENT_RELEASEDIRECTORY"
            ls "$env:SYSTEM_ARTIFACTSDIRECTORY\MyScreensaver_wpf\bin\$($env:BuildConfiguration)\"
           }
           If (-not (Test-Path "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\distributable\$($env:BuildConfiguration)")){
             New-Item "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\distributable\$($env:BuildConfiguration)" -ItemType Directory
           }
           copy-item "$env:SYSTEM_ARTIFACTSDIRECTORY\MyScreensaver_wpf\bin\$($env:BuildConfiguration)\MyScreensaver_wpf.exe" "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\distributable\$($env:BuildConfiguration)\MyScreensaver_wpf.scr"
           
           return 0
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(build.artifactstagingdirectory)\distributable\$($env:BuildConfiguration)'
        artifact: 'Distributable'
        publishLocation: 'pipeline' 
      enabled: true   
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'build'
        artifact: 'build'
        publishLocation: 'pipeline'  
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
    - task: GitHubRelease@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        gitHubConnection: 'SpookyScreenSaver'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Test'
        isDraft: true
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'